<%- include ('../partials/headers_logged_in') %>

<% if(typeof flag == 'undefined') { %>
    <script>
        var flag = 0;
    </script>
<% } else { %>
    <script>
        var flag = <%= flag %>;
    </script>
<% } %> 

<script>
    window.onload = function(){
        console.log(flag);
        if(flag == 0){  
            document.getElementById("graphDIV").style.visibility='hidden';
        } else if (flag == 1){
            document.getElementById("graphDIV").style.visibility='visible';
            flag = 0;
        }
    };
</script>

<main class="mb-48 flex flex-col">
    <div class="container mx-auto pt-10">
        <div class="text-center">
            <p class="text-2xl p-1 font-semibold text-gray-400 mb-8">Enter a song and see when people are listening!</p>
        </div>
        <div class="text-center">
            <!-- Search Bar -->
            <form action="/monthly_listens" method="GET">
            <input id="title" name="title" class="bg-stone-200 p-4 rounded-xl text-xl"></input>
            <!-- <a href="/search_song?q=Gunna"> -->
            <button type="submit" class="ml-1 p-4 rounded-xl bg-black text-white text-xl font-semibold">Show Stats &nbsp;üîç</button>
            <!-- </a> -->
            </form>
        </div>
    </div>

    <div class="grid grid-cols-12 pt-16" id="graphDIV">
        <div class="chartCard col-start-2 col-span-8 max-w-5xl">
            <div class="chartBox">
                <canvas id="myChart"></canvas>
            </div>
        </div>
        <div class="col-end-12 col-span-2 max-w-xl">
            <div class="grid grid-rows-6">
                <div class="row-span-1 text-left">
                    <br>
                    <p class="text-xl p-1 font-semibold text-gray-400 mb-3">Showing results for...</p>
                </div>
                <div class="grid grid-cols-1 row-span-5">
                    <% if(typeof song != 'undefined') {
                        cards = '';
                        cards += '<div class="p-3 bg-stone-100 cursor-pointer rounded">';
                        cards += '<img class="" src="' + song.image_link + '">';
                        cards += '<div class="text-2xl font-semibold my-2">'+song.title+'</div>';
                        cards += '<div class="mb-2">'+song.artist+'</div>';
                        cards += '</div>';
                        %>
                        <%- cards %>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <% if(typeof monthly_data == 'undefined') { %>
        <script>
            const monthly_data = [0,0,0,0,0,0,0,0,0,0,0,0];
        </script>
    <% } else { %>
        <script>
            const monthly_data = [<%= monthly_data %>];
        </script>
    <% } %>

    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        //last month displayed on chart set to current month
        const date = new Date();
        let current_month = date.getMonth();
        const min_month = current_month - 5;
        const max_month = current_month;
        if (current_month < 5) {
            min_month = 0;
            max_month = 5;
        }
        const data = {
            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            datasets: [{
                label: 'Listens',
                data: monthly_data,  // [18, 12, 6, 9, 12, 3, 9, 1, 19, 13, 4, 9]
                backgroundColor: [
                    'rgb(255, 230, 179)',
                    'rgb(255, 230, 179)',
                    'rgb(255, 230, 179)',
                    'rgb(255, 230, 179)',
                    'rgb(255, 230, 179)',
                    'rgb(255, 230, 179)'
                ],
                borderColor: [
                    'rgb(230, 153, 0)',
                    'rgb(230, 153, 0)',
                    'rgb(230, 153, 0)',
                    'rgb(230, 153, 0)',
                    'rgb(230, 153, 0)',
                    'rgb(230, 153, 0)'
                ],
                borderWidth: 1
            }]
        };
        // moveChart block
        const moveChart = {     //scrollable x-axis functionality
            id: 'moveChart',
            afterEvent(chart, args) {
                const { ctx, canvas, chartArea: { left, right, top, bottom, width, height } } = chart;
                canvas.addEventListener('mousemove', (event) => {
                    const x = args.event.x;
                    const y = args.event.y;
                    //console.log('x:' + x + ' - ' + 'y:' + y)   //gives x and y coordinates of hover event
                    if (x >= left - 15 && x <= left + 15 && y >= height / 2 + top - 15 && y <= height / 2 + top + 15) {
                        canvas.style.cursor = 'pointer';    //chage to pointer when hovering over button
                    } else if (x >= right - 15 && x <= right + 15 && y >= height / 2 + top - 15 && y <= height / 2 + top + 15) {
                        canvas.style.cursor = 'pointer';
                    } else {
                        canvas.style.cursor = 'default';
                    }
                })
            },
            afterDraw(chart, args, pluginOptions) {
                const { ctx, chartArea: { left, right, top, bottom, width, height } } = chart;
                const angle = Math.PI / 180;
                class CircleChevron {
                    //constructor(x1,y1) {
                    //}
                    draw(ctx, x1, pixel) {
                        ctx.beginPath();
                        ctx.lineWidth = 3; //make a circle of 3 pixels for button
                        ctx.strokeStyle = 'rgb(230, 153, 0)';
                        ctx.fillStyle = 'white';   //customizing button colors
                        ctx.arc(x1, height / 2 + top, 15, angle * 0, angle * 360, false)   //ctx.arc(x, y, radius, angleS, angleE, false)
                        ctx.stroke();
                        ctx.fill();
                        ctx.closePath();
                        ctx.beginPath(); //add arrow (chevron)
                        ctx.lineWidth = 3;
                        ctx.strokeStyle = 'rgb(230, 153, 0)';
                        ctx.moveTo(x1 + pixel, height / 2 + top - 7.5);
                        ctx.lineTo(x1 - pixel, height / 2 + top);
                        ctx.lineTo(x1 + pixel, height / 2 + top + 7.5);
                        ctx.stroke();
                        ctx.closePath();
                    }
                }
                let drawCircleLeft = new CircleChevron();
                drawCircleLeft.draw(ctx, left, 5);
                let drawCircleRight = new CircleChevron();
                drawCircleRight.draw(ctx, right, -5);
            }
        }
        // config 
        const config = {
            type: 'bar',
            data,
            options: {
                layout: {
                    padding: {
                        right: 18
                    }
                },
                scales: {
                    x: {
                        min: min_month,
                        max: max_month
                    },
                    y: {
                        ticks: {
                            beginAtZero: true,
                            stepSize: 1
                        }
                    }
                }
            },
            plugins: [moveChart]
        };
        // render init block
        const myChart = new Chart(
            document.getElementById('myChart'),
            config
        );
        function moveScroll() {    //arrows become functional scrolling through data
            const { ctx, canvas, chartArea: { left, right, top, bottom, width, height } } = myChart;
            canvas.addEventListener('click', (event) => {
                const rect = canvas.getBoundingClientRect();
                const x = event.clientX - rect.left;
                const y = event.clientY - rect.top;
                if (x >= left - 15 && x <= left + 15 && y >= height / 2 + top - 15 && y <= height / 2 + top + 15) {  //scroll left
                    myChart.options.scales.x.min = myChart.options.scales.x.min - 1;
                    myChart.options.scales.x.max = myChart.options.scales.x.max - 1;
                    if (myChart.options.scales.x.min <= 0) {
                        myChart.options.scales.x.min = 0;
                        myChart.options.scales.x.max = 5;
                    }
                }
                if (x >= right - 15 && x <= right + 15 && y >= height / 2 + top - 15 && y <= height / 2 + top + 15) {   //scroll right
                    myChart.options.scales.x.min = myChart.options.scales.x.min + 1;
                    myChart.options.scales.x.max = myChart.options.scales.x.max + 1;
                    if (myChart.options.scales.x.max >= data.datasets[0].data.length) {
                        myChart.options.scales.x.min = data.datasets[0].data.length - 6;
                        myChart.options.scales.x.max = data.datasets[0].data.length - 1;
                    }
                }
                myChart.update();
            })
        }
        myChart.ctx.onclick = moveScroll();
    </script>
</main>

<%- include ('../partials/footer') %>